from google import genai
from config.settings import GEMINI_API_KEY  # Import API key from config

class DiagnosticsModel:
    def __init__(self):
        self.client = genai.Client(api_key=GEMINI_API_KEY)  # Initialize GenAI client

    def train(self):
        # Placeholder for model training
        print("Model training placeholder.")

    def generate_report(self, user_input):
        """Generates a diagnostic report using Gemini."""
        prompt = f"Based on the following medical information: {user_input}, generate a concise diagnostic report with potential diagnoses and medication suggestions in the Headings as Potential Diagnose and Medication Suggestions only. Also, for any important disclaimers or notes, include them at the end of the report. Report must be in markdown format and it must start with a Potential Diagnose, nothing else."
        
        try:
            response = self.client.models.generate_content(
                model="gemini-2.0-flash",
                contents=[prompt])
            report_text = response.text
            print(response.text) # for debugging
        except Exception as e:
            report_text = f"Error generating report: {e}"
            print(f"Error generating report: {e}")

        # Extract important disclaimers or notes if they exist
        additional_notes = ["This report was generated by an AI. Consult a doctor for a detailed evaluation."]
        disclaimer_patterns = ["**Important Disclaimer:**", "Important Disclaimer:", "Important Note:", "**Note:**", "**Disclaimer:**", "**Notes:**", "**Disclaimers:**", "**Important Disclaimers:**", "**Important Notes:**", "**Important Note:**", "**Important Disclaimers and Notes:**", "**Important Notes and Disclaimers:**"]
        
        for pattern in disclaimer_patterns:
            if pattern in report_text:
                parts = report_text.split(pattern, 1)
                # Get the disclaimer text until the next section or end
                disclaimer_text = parts[1]
                if "**" in disclaimer_text:
                    disclaimer_text = disclaimer_text.split("**", 1)[0]
                elif "\n\n" in disclaimer_text:
                    disclaimer_text = disclaimer_text.split("\n\n", 1)[0]
                
                # Add the disclaimer to additional_notes
                additional_notes.append(f"{pattern}{disclaimer_text}")
                
                # Remove from report text
                report_text = report_text.replace(f"{pattern}{disclaimer_text}", "")
        
        # Clean up the report text
        report_text = report_text.strip()
        
        # Split the report into diagnosis and medication suggestions
        if "**Potential Diagnoses:**" in report_text or "Potential Diagnoses:" in report_text or "Potential Diagnoses" in report_text:
            # Extract the part after the diagnoses heading
            if "**Potential Diagnoses:**" in report_text:
                parts = report_text.split("**Potential Diagnoses:**", 1)
            else:
                parts = report_text.split("Potential Diagnoses:", 1)
            
            remaining = parts[1].strip()
            
            # Find the next section heading
            if "**" in remaining:
                diagnosis_part = remaining.split("**", 1)
                diagnosis = diagnosis_part[0].strip()
                medication = "**" + diagnosis_part[1].strip()
            else:
                # No next section found - all remaining text is diagnosis
                diagnosis = remaining
                medication = ""
        else:
            # No diagnosis section found
            diagnosis = "No diagnosis available."
            medication = report_text.strip()

        report = {
            "diagnosis": diagnosis,
            "furtherDetails": medication,
            "additional_notes": " ".join(additional_notes)
        }
        return report