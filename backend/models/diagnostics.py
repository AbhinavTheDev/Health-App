# backend/models/diagnostics.py
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from google import genai
from config.settings import GEMINI_API_KEY  # Import API key from config

class DiagnosticsModel:
    def __init__(self):
        self.model = RandomForestClassifier()
        client = genai.Client(api_key="GEMINI_API_KEY")  # Initialize GenAI client

    def train(self):
        # Placeholder for model training
        print("Model training placeholder.")

    def generate_report(self, user_input):
        """Generates a diagnostic report using Gemini."""
        prompt = f"Based on the following medical information: {user_input}, generate a concise diagnostic report with potential diagnoses and medication suggestions."

        try:
            response = client.models.generate_content(
                 model="gemini-2.0-flash",
                 contents=[prompt])
            report_text = response.text
            print(response.text) # for debugging

        except Exception as e:
            report_text = f"Error generating report: {e}"
            print(f"Error generating report: {e}")

        # Split the report into diagnosis and medication suggestions (naive approach)
        parts = report_text.split('\n')
        diagnosis = parts[0] if parts else "No diagnosis available."
        medication = parts[1] if len(parts) > 1 else "No medication suggestions."

        report = {
            "diagnosis": diagnosis,
            "medication_suggestions": medication,
            "additional_notes": "This report was generated by an AI. Consult a doctor for a detailed evaluation."
        }
        return report
